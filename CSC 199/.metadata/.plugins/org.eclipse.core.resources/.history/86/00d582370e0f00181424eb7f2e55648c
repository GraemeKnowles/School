package recursiveDescent;

// This parser parses input based on the following Infix Grammar. 
// expression ::= "(", (function | operator) ,")"
// function ::= validName, {" ", term}
// validName ::= validChar, {" ", validChar}
// validChar ::= a-z | A-Z | 0-9 | _ | . | /
// term ::= param | expression
// operator ::= operatorName, " ", term, " ", term
// operatorName ::= + | - | / | * 
// param ::= validName

// All rules have their own class

public class Parser {

	Token parsed = null;

	public boolean parse(String input) {
		try {
			parsed = Expression.parse(new InputScanner(input));
		} catch (IllegalArgumentException iae) {
			System.out.println(iae.getMessage());
			return false;
		}
		return true;
	}

	public String toInfix() {
		if (parsed == null) {
			return "";
		}
		return parsed.toInfix();
	}

}
