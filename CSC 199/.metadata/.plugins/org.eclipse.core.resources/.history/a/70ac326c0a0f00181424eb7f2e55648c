package recursiveDescent;

//expression ::= (function | operator)
class Expression extends Token{

	public static Expression parse(InputScanner input) {
		Expression e = new Expression();
		if(input.moveNext() == '(') {
			char peekNext = input.peekNext();
			if(OperatorName.validChar(peekNext)) {
				e.function = Operator.parse(input);
			}else {
				e.function = Function.parse(input);
			}

			if (input.moveNext() == ')') {
				return e;
			}else {
				throw new IllegalArgumentException("Missing ) at index " + input.getIndex());
			}
		}else {
			throw new IllegalArgumentException("Missing ( at index " + input.getIndex());
		}
	}
	
	Function function;
	
	protected Expression() {}
	
	@Override
	public String toInfix() {
		return "(" + function.toInfix() + ")";
	}
}
